{
	"tldrawFileFormatVersion": 1,
	"schema": {
		"schemaVersion": 2,
		"sequences": {
			"com.tldraw.store": 4,
			"com.tldraw.asset": 1,
			"com.tldraw.camera": 1,
			"com.tldraw.document": 2,
			"com.tldraw.instance": 24,
			"com.tldraw.instance_page_state": 5,
			"com.tldraw.page": 1,
			"com.tldraw.instance_presence": 5,
			"com.tldraw.pointer": 1,
			"com.tldraw.shape": 4,
			"com.tldraw.asset.bookmark": 1,
			"com.tldraw.asset.image": 3,
			"com.tldraw.asset.video": 3,
			"com.tldraw.shape.group": 0,
			"com.tldraw.shape.text": 2,
			"com.tldraw.shape.bookmark": 2,
			"com.tldraw.shape.draw": 1,
			"com.tldraw.shape.geo": 8,
			"com.tldraw.shape.note": 6,
			"com.tldraw.shape.line": 4,
			"com.tldraw.shape.frame": 0,
			"com.tldraw.shape.arrow": 3,
			"com.tldraw.shape.highlight": 0,
			"com.tldraw.shape.embed": 4,
			"com.tldraw.shape.image": 3,
			"com.tldraw.shape.video": 2
		}
	},
	"records": [
		{
			"gridSize": 10,
			"name": "",
			"meta": {},
			"id": "document:document",
			"typeName": "document"
		},
		{
			"id": "pointer:pointer",
			"typeName": "pointer",
			"x": 2147.1085342804236,
			"y": 5379.496567782788,
			"lastActivityTimestamp": 1716669370779,
			"meta": {}
		},
		{
			"meta": {},
			"id": "page:page",
			"name": "Page 1",
			"index": "a1",
			"typeName": "page"
		},
		{
			"x": 4609.010850485201,
			"y": -2265.8900003999747,
			"z": 0.1,
			"meta": {},
			"id": "camera:page:page",
			"typeName": "camera"
		},
		{
			"editingShapeId": null,
			"croppingShapeId": null,
			"selectedShapeIds": [],
			"hoveredShapeId": null,
			"erasingShapeIds": [],
			"hintingShapeIds": [],
			"focusedGroupId": null,
			"meta": {},
			"id": "instance_page_state:page:page",
			"pageId": "page:page",
			"typeName": "instance_page_state"
		},
		{
			"followingUserId": null,
			"opacityForNextShape": 1,
			"stylesForNextShape": {
				"tldraw:horizontalAlign": "start",
				"tldraw:color": "black"
			},
			"brush": null,
			"scribbles": [],
			"cursor": {
				"type": "default",
				"rotation": 0
			},
			"isFocusMode": false,
			"exportBackground": true,
			"isDebugMode": false,
			"isToolLocked": false,
			"screenBounds": {
				"x": 0,
				"y": 0,
				"w": 980,
				"h": 445
			},
			"insets": [
				false,
				false,
				true,
				false
			],
			"zoomBrush": null,
			"isGridMode": false,
			"isPenMode": false,
			"chatMessage": "",
			"isChatting": false,
			"highlightedUserIds": [],
			"canMoveCamera": true,
			"isFocused": true,
			"devicePixelRatio": 2.4000000953674316,
			"isCoarsePointer": false,
			"isHoveringCanvas": true,
			"openMenus": [],
			"isChangingStyle": false,
			"isReadonly": false,
			"meta": {},
			"duplicateProps": null,
			"id": "instance:instance",
			"currentPageId": "page:page",
			"typeName": "instance"
		},
		{
			"x": -92.19918823242188,
			"y": 174.19191551208496,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:c3UQGlAUygV35wAtUvpF8",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 709.8411254882812,
				"text": "int gettimeofday(struct timeval *tv, struct timezone *tz);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "middle"
			},
			"parentId": "page:page",
			"index": "a1",
			"typeName": "shape"
		},
		{
			"x": -26.033859252929688,
			"y": 225.0479335784912,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:Iyzh5CGTtwY7h5JGABO-w",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 858.40234375,
				"text": "is a function used to get the current time with microsecond precision",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "middle"
			},
			"parentId": "page:page",
			"index": "a2",
			"typeName": "shape"
		},
		{
			"x": 6.21551513671875,
			"y": 278.3553066253662,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:3aNXZWyoc4kVj5yGRFnXi",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 544.5546875,
				"text": "it returns 0. If an error occurs, it returns -1",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "middle"
			},
			"parentId": "page:page",
			"index": "a3",
			"typeName": "shape"
		},
		{
			"x": -77.44492511522185,
			"y": 388.24893528716757,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:ENsQDcYu9WIqq87bAs1S8",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 1360.602783203125,
				"text": "int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "middle"
			},
			"parentId": "page:page",
			"index": "a4",
			"typeName": "shape"
		},
		{
			"x": -17.6141756035031,
			"y": 433.07315403716757,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:BWWRQyi9OF7BG_xw4lJo_",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 733.3372192382812,
				"text": "pthread_t thread_id;\npthread_create(&thread_id, NULL, thread_function, NULL);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "a5",
			"typeName": "shape"
		},
		{
			"x": -7.190334959948757,
			"y": 514.3067611101649,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:dWO-FrGPyRMNZAB0zhH9M",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 519.7369384765625,
				"text": "is a function used to create a new thread",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "a6",
			"typeName": "shape"
		},
		{
			"x": 53.45160138022493,
			"y": 553.6591360347486,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:giK_Uyk5XZYq47_x-bLzO",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 2469.4765625,
				"text": "thread: A pointer to a variable of type pthread_t where the thread ID will be stored upon successful creation.\nattr: An optional pointer to a pthread_attr_t structure containing thread attributes. You can usually pass NULL if you want to use the default attributes.\nstart_routine: A pointer to the function that will be executed by the new thread. It should take a single void* argument and return a void*. This function will be the entry point for the new thread.\narg: A pointer to an argument that will be passed to the start_routine function when the thread is created.",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "a7",
			"typeName": "shape"
		},
		{
			"x": 99.64917399803693,
			"y": 706.1232125520894,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:Zn_O7-ghHX_Bt2T9cqOY7",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 804.37890625,
				"text": "ret = pthread_create(&thread_id, NULL, thread_function, NULL);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "a8",
			"typeName": "shape"
		},
		{
			"x": -69.88885662417351,
			"y": 773.7144848664338,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:d-nA4XxvkwK_Qm1ZD6sVl",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 536.1301879882812,
				"text": "#include <pthread.h>\nint pthread_detach(pthread_t thread_id);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "a9",
			"typeName": "shape"
		},
		{
			"x": -95.34738950349339,
			"y": 132.73086783124586,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:CRDAYXHEWqeiSDscZMM2z",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 280.81768798828125,
				"text": "#include <sys/time.h>",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aA",
			"typeName": "shape"
		},
		{
			"x": -81.6027212379849,
			"y": 348.9171778096469,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:HLTYOdncmCpDBeZES0i92",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 276.3775939941406,
				"text": "#include <pthread.h>",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aB",
			"typeName": "shape"
		},
		{
			"x": -15.435040914945375,
			"y": 850.1469361149987,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:kEl176oSFPd9Ti92lk6IF",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 2647.028564453125,
				"text": "When you detach a thread, it means you're not waiting for it to finish. The main thread or the thread that created the detached thread continues executing without blocking on the detached thread's completion",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aC",
			"typeName": "shape"
		},
		{
			"x": -12.853561013435296,
			"y": 894.0314146387259,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:HMGY4UTqLfi990dzbI2hf",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 729.4505004882812,
				"text": "matsnach trea ta tsali tkml l program o thread f nfs lw9t",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aD",
			"typeName": "shape"
		},
		{
			"x": -67.1812886753844,
			"y": 977.0586088828495,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:XWbsD4-HE7jLd9WT1ppMN",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 625.9869384765625,
				"text": "#include <pthread.h>\nint pthread_join(pthread_t thread, void **retval);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aE",
			"typeName": "shape"
		},
		{
			"x": -39.579587577766006,
			"y": 1080.0548366287794,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:j2ZhT0HcGwLk-1d3GQ0B0",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1732.796875,
				"text": "thread: The thread identifier (pthread_t) of the thread you want to wait for.\nretval: A pointer to a location where the exit status of the joined thread will be stored. This can be NULL if you don't need the exit status.",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aF",
			"typeName": "shape"
		},
		{
			"x": -41.087796170353045,
			"y": 1175.6477702081922,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:QBkJuvng2HvOLf4B9H4AQ",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 826.29296875,
				"text": "wait for a specific thread to finish its execution. Here's the syntax",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aG",
			"typeName": "shape"
		},
		{
			"x": -68.22804058174614,
			"y": 1244.885614063117,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:D9ZeEicdughawGCYcz2n2",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 1066.09765625,
				"text": "#include <pthread.h>\nint pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aH",
			"typeName": "shape"
		},
		{
			"x": -1.9613513403283491,
			"y": 1312.682594535935,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:u5ts52thTvuIvHNd28WNi",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 745.4947509765625,
				"text": "pthread_mutex_t is a data type representing a mutex. A mutex is a synchronization primitive used to protect shared resources from simultaneous access by multiple threads.",
				"font": "draw",
				"autoSize": false,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aI",
			"typeName": "shape"
		},
		{
			"x": 34.64302642818768,
			"y": 1424.4533979874732,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:NjwR4B4gfZ_q7UEe0MCyt",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 965.6790838051745,
				"text": "used to initialize a mutex, which is a synchronization primitive\n used to protect shared resources from concurrent access by multiple threads",
				"font": "draw",
				"autoSize": true,
				"scale": 0.9947736633800706,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aJ",
			"typeName": "shape"
		},
		{
			"x": -55.54734987548454,
			"y": 1523.335172889817,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:0HtCF28taASt9OXWmTvL4",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 690.140625,
				"text": "#include <pthread.h>\nint pthread_mutex_destroy(pthread_mutex_t *mutex);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aK",
			"typeName": "shape"
		},
		{
			"x": 0.8133373803748327,
			"y": 1599.2076704484107,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:fwgGp_xYV0NMCFwM3pxtU",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 585.1145629882812,
				"text": "to destroy a mutex after it's no longer needed",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aL",
			"typeName": "shape"
		},
		{
			"x": -53.05690455398644,
			"y": 1666.209161599459,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:BtKNrWBJmU8VjUnqe_g2R",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 644.4895629882812,
				"text": "#include <pthread.h>\nint pthread_mutex_lock(pthread_mutex_t *mutex);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aM",
			"typeName": "shape"
		},
		{
			"x": 14.046000719451058,
			"y": 1741.7041567166466,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:aNta1nOdTMnO3YXXZxRX-",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1168.03125,
				"text": "When a thread locks a mutex using pthread_mutex_lock(), \nit gains exclusive access to the critical section of code protected by that mutex. This means\n that if other threads attempt to lock the same mutex while it is locked by one thread, they \nwill be blocked (paused) until the mutex becomes available again.",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aN",
			"typeName": "shape"
		},
		{
			"x": -50.05559229812707,
			"y": 1898.8002870877403,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:RGLUwd2slfqx1XWOV-p04",
			"type": "text",
			"props": {
				"color": "red",
				"size": "m",
				"w": 676.7486572265625,
				"text": "#include <pthread.h>\nint pthread_mutex_unlock(pthread_mutex_t *mutex);",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aO",
			"typeName": "shape"
		},
		{
			"x": -14.345936536408317,
			"y": 1979.6596620877403,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:Hl2B7GxZB-hlG9PDUpEDc",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 786.83984375,
				"text": "When you call pthread_mutex_unlock(), the calling\n thread releases the lock on the mutex, allowing other\n threads to acquire the lock and access the protected resource",
				"font": "draw",
				"autoSize": true,
				"scale": 1,
				"textAlign": "start"
			},
			"parentId": "page:page",
			"index": "aP",
			"typeName": "shape"
		},
		{
			"x": -112.81735682449471,
			"y": 105.52072509128038,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:i4_Mhb4CalXxEsgxjT0Q6",
			"type": "line",
			"parentId": "page:page",
			"index": "aQ",
			"props": {
				"dash": "draw",
				"size": "m",
				"color": "red",
				"spline": "line",
				"points": {
					"a1": {
						"id": "a1",
						"index": "a1",
						"x": 0,
						"y": 0
					},
					"a2": {
						"id": "a2",
						"index": "a2",
						"x": 15.4296875,
						"y": 1948.2745361328125
					}
				}
			},
			"typeName": "shape"
		},
		{
			"x": -76.48030238949832,
			"y": 2098.7774839967765,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:_S6fcxBGR8KdIZsihaK-L",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 311.87237548828125,
				"text": "#include <semaphore.h>",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b08",
			"typeName": "shape"
		},
		{
			"x": -56.28498988949832,
			"y": 2147.3126402467765,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:I0U_Nwa1NP97szkigOwfb",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 625.0755004882812,
				"text": "sem_t *sem_open(const char *name, int oflag, ...);",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b09",
			"typeName": "shape"
		},
		{
			"x": -45.00245815121707,
			"y": 2189.0443296999015,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:pjzc17AVt_1DluOGy5dfG",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1512.30859375,
				"text": "Parameters\nname: A string that names the semaphore. It must start with a '/' character and be followed by one or more characters.\noflag: Flags that determine the behavior of the function. Common flags are:\nO_CREAT: Create the semaphore if it does not exist.\nO_EXCL: Used with O_CREAT, this flag ensures that the call fails if the semaphore already exists.\nOptional additional arguments:\nmode_t mode: The permissions to be placed on the new semaphore, if it is created.\nunsigned int value: The initial value for the semaphore.\nReturn Value\nOn success, sem_open returns a pointer to the semaphore.\nOn failure, it returns SEM_FAILED and sets errno to indicate the error.",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0A",
			"typeName": "shape"
		},
		{
			"x": -74.94709926449832,
			"y": 2590.6036558717765,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:zOEBrHdWRDI36QpUT-xrD",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 311.87237548828125,
				"text": "#include <semaphore.h>",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0B",
			"typeName": "shape"
		},
		{
			"x": -77.40809779965457,
			"y": 2634.112811145214,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:UWs5hVl8Oddt7eiinhRJ8",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 339.9322814941406,
				"text": "int sem_close(sem_t *sem);",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0C",
			"typeName": "shape"
		},
		{
			"x": -77.93538051449832,
			"y": 2717.4265928834952,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:XWXIDBJCpY0er-m-kw_72",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 744.1119384765625,
				"text": "Parameters\nsem: A pointer to the semaphore to be closed.\nReturn Value\nOn success, sem_close returns 0.\nOn failure, it returns -1 and sets errno to indicate the error.",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0D",
			"typeName": "shape"
		},
		{
			"x": -77.37550502621707,
			"y": 2671.6127501100577,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:hBavZvMJfDCnANoI1CNOR",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 423.06378173828125,
				"text": "used to close a named semaphore",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0E",
			"typeName": "shape"
		},
		{
			"x": -93.07856899106082,
			"y": 2899.5033598512687,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:8XLyT5Vg2-af9pv6hQXlS",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 311.87237548828125,
				"text": "#include <semaphore.h>",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0F",
			"typeName": "shape"
		},
		{
			"x": -87.68147426449832,
			"y": 2935.47339158955,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:Cjj5dtRS1rHcqmrzchuue",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 333.7408752441406,
				"text": "int sem_post(sem_t *sem);",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0G",
			"typeName": "shape"
		},
		{
			"x": -89.80378871762332,
			"y": 2968.2142973512687,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:tQmK4mMhfixCKCLdukL8C",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 498.2330627441406,
				"text": "used to increment (unlock) a semaphore",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0H",
			"typeName": "shape"
		},
		{
			"x": -86.45100551449832,
			"y": 3016.313265857128,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:hg--8gfxSBBtpW2pYY2vW",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 744.1119384765625,
				"text": "Parameters\nsem: A pointer to the semaphore to be incremented.\nReturn Value\nOn success, sem_post returns 0.\nOn failure, it returns -1 and sets errno to indicate the error.",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0I",
			"typeName": "shape"
		},
		{
			"x": -90.72841029965457,
			"y": 3195.7923918336905,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:gvzfwj6tpLf7BnfqcfC88",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 311.87237548828125,
				"text": "#include <semaphore.h>",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0J",
			"typeName": "shape"
		},
		{
			"x": -90.26606899106082,
			"y": 3240.9291411012687,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:9_gbrdR4DPcHPSE87_KD2",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 337.1979064941406,
				"text": "int sem_wait(sem_t *sem);",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0K",
			"typeName": "shape"
		},
		{
			"x": -92.22578578793582,
			"y": 3331.4239225954093,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:lSfvM5cksVDzKUNvmj915",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 744.1119384765625,
				"text": "Parameters\nsem: A pointer to the semaphore to be decremented.\nReturn Value\nOn success, sem_wait returns 0.\nOn failure, it returns -1 and sets errno to indicate the error.",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0L",
			"typeName": "shape"
		},
		{
			"x": -88.04615932309207,
			"y": 3280.2130156129874,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:LOPgxXhPIvPOb5OHfRNxz",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 478.98828125,
				"text": "used to decrement (lock) a semaphore",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0M",
			"typeName": "shape"
		},
		{
			"x": -97.01094203793582,
			"y": 3499.125704821972,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:jG124cHbjUYKtJDZ14R8s",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 311.87237548828125,
				"text": "#include <semaphore.h>",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0N",
			"typeName": "shape"
		},
		{
			"x": -90.96272426449832,
			"y": 3537.016329821972,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:z_teyQkRA6c-O7TLyLgHY",
			"type": "text",
			"props": {
				"color": "light-blue",
				"size": "m",
				"w": 427.5104064941406,
				"text": "int sem_unlink(const char *name);",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0O",
			"typeName": "shape"
		},
		{
			"x": -62.713914450045195,
			"y": 3596.821032580761,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:2odnISC1PfHJuv_gFMCYF",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 663.08984375,
				"text": "used to remove a named semaphore from the system",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0P",
			"typeName": "shape"
		},
		{
			"x": -61.190599020357695,
			"y": 3628.845751819042,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:cgk5p45bBu_M5di_fhXHD",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1272.09375,
				"text": "Parameters\nname: A string that names the semaphore to be removed. It must match the name used in sem_open.\nReturn Value\nOn success, sem_unlink returns 0.\nOn failure, it returns -1 and sets errno to indicate the error",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "b0Q",
			"typeName": "shape"
		}
	]
}